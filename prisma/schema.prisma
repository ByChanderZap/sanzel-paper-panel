// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model Clients {
  id            String      @id @default(cuid())
  name          String
  email         String?      
  phone         String
  shippingNumber String?
  address       String
  city          String
  state         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  
  // Relations
  orders        Orders[]
}

model Products {
  id          String        @id @default(cuid())
  name        String
  description String?
  quality     PaperQuality  @default(PRIMERA)
  stock       Int
  unit_price  Float         // Base price in cents
  width       Float
  linear_size Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  
  // Relations
  orderItems  OrderItems[]
}

model Orders {
  id         String         @id @default(cuid())
  clientId   String
  price      Float                                // Total price in cents
  discount   Int?           @default(0)           // Discount in cents (optional)
  status     OrderStatus    @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?
  
  // Relations
  client     Clients        @relation(fields: [clientId], references: [id])
  orderItems OrderItems[]
}

model OrderItems {
  id          String        @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unit_price  Int           // Price at time of order (can differ from product base price)
  item_total  Float         // calculation made using width linear size, unit price and quantity
  width       Float         // Width at time of order (can differ from product base width)
  linear_size Float         // Linear size at time of order (can differ from product base linear_size)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  order       Orders        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Products      @relation(fields: [productId], references: [id])
  
  @@unique([orderId, productId, id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PAID
  NOT_PAID
}

enum PaperQuality {
  PRIMERA
  LINEA
  SEGUNDA
  TERCERA
  SOBRANTE
  REPROCESO
}
